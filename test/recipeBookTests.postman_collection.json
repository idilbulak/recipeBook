{
	"info": {
		"_postman_id": "e25ac5f6-86b6-4e2f-8ba6-348148afc31d",
		"name": "recipeBookTests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27491434"
	},
	"item": [
		{
			"name": "localhost:8080",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field 'message'\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Test that 'message' is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response body is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.not.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/anyRoute",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"anyRoute"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:8080/recipes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"  pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - message\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response body is empty\", function () {",
							"    pm.expect(pm.response.text()).to.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/recipes",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"recipes"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:8080/recipes(1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - message\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Response body is not empty\", function () {",
							"  pm.expect(pm.response.text()).to.not.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Tomato Basil Pasta\",\n    \"isVegetarian\": true,\n    \"numberOfServings\": 4,\n    \"instructions\": \"Start by boiling pasta. Meanwhile, cook garlic and tomatoes in olive oil and add cooked pasta.\",\n    \"ingredients\": [\"pasta\", \"tomatoe\", \"olive oil\"]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/recipes",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"recipes"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:8080/recipes(2)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"  pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response body is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Vegetable Stir-Fry\",\n    \"isVegetarian\": true,\n    \"numberOfServings\": 4,\n    \"instructions\": \"Saut√© vegetables in a hot wok with olive oil and a stir-fry sauce. Serve over cooked rice or noodles.\",\n    \"ingredients\": [\"red pepper\", \"zucchini\", \"olive oil\", \"stir-fry sauce\", \"noodles\"]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/recipes",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"recipes"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:8080/recipes(3)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - message\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.length.above(0, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Chicken Tacos\",\n    \"isVegetarian\": false,\n    \"numberOfServings\": 2,\n    \"instructions\": \"Season chicken with taco seasoning and cook until done. Fill taco shells with cooked chicken, lettuce, tomatoes, cheese.\",\n    \"ingredients\": [\"chicken breasts\", \"taco seasoning\", \"taco shells\", \"lettuce\", \"tomatoe\", \"cheese\"]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/recipes",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"recipes"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:8080/recipes/2",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:8080/recipes/2",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"recipes",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:8080/recipes/4 (non existing)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"  pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'message' field is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'message' field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'message' field contains a meaningful error message\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.not.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:8080/recipes/4",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"recipes",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:8080/recipes/1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'message' field is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the value of 'message' is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the updated recipe with ID 1 is returned in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.recipe).to.exist.and.to.have.property('id').to.equal(1);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the updated recipe has the correct fields and values\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('message').that.is.a('string');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"changed\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/recipes/1",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"recipes",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:8080/recipes/1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'message' field is present in the response\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Validate that the 'message' field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the updated recipe has the correct ID\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Verify the updated recipe has the expected changes\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.equal(\"Expected changes\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"ingredients\": [\"changed\", \"pasta\", \"tomatoe\"],\n    \"name\": \"changed2\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/recipes/1",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"recipes",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:8080/recipes/2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - message\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the recipe ID in the response message matches the requested recipe ID\", function () {",
							"    const responseData = pm.response.json();",
							"    const requestedRecipeId = 2;",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.include(requestedRecipeId.toString(), \"Recipe ID in the response message does not match the requested recipe ID\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"ingredients\": [\"changed\", \"zucchini\", \"olive oil\", \"stir-fry sauce\", \"changed\"]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/recipes/2",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"recipes",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:8080/ingredients",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response is an array with at least one element\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Validate the structure of the response object\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function (ingredient) {",
							"    pm.expect(ingredient).to.be.an('object');",
							"    pm.expect(ingredient.id).to.exist.and.to.be.a('number');",
							"    pm.expect(ingredient.name).to.exist.and.to.be.a('string');",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Validate id is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function (ingredient) {",
							"        pm.expect(ingredient.id).to.be.a('number').and.to.be.at.least(0, \"id should be a non-negative integer\");",
							"    });",
							"});",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/ingredients",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:8080/filter(by instructionsContaining)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response is an array\", function () {",
							"  pm.expect(pm.response.json()).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Validate the id is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  ",
							"  responseData.forEach(function(recipe) {",
							"    pm.expect(recipe.id).to.be.a('number');",
							"    pm.expect(recipe.id).to.be.at.least(0, \"id should be a non-negative integer\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Validate that the 'name' is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(recipe) {",
							"    pm.expect(recipe.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Verify that 'isVegetarian' is a boolean value\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(recipe) {",
							"        pm.expect(recipe.isVegetarian).to.be.a('boolean');",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"instructionsContaining\": \"cook\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/recipes/filter",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"recipes",
						"filter"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:8080/filter(by numberOfServings-4)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response is an array with at least one element\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Verify the presence of 'ingredients' array and expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    pm.expect(responseData).to.have.lengthOf(1);",
							"    pm.expect(responseData[0].ingredients).to.exist;",
							"    pm.expect(responseData[0].ingredients).to.be.an('array');",
							"    pm.expect(responseData[0].ingredients).to.have.lengthOf(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"numberOfServings\": 4\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/recipes/filter",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"recipes",
						"filter"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:8080/filter(by numberOfServings-10)",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"numberOfServings\": 10\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/recipes/filter",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"recipes",
						"filter"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:8080/filter(by isVegetarian)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    responseData.forEach(function (recipe) {",
							"        pm.expect(recipe.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"  pm.test(\"Verify that the 'isVegetarian' field is a boolean value\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(recipe) {",
							"      pm.expect(recipe.isVegetarian).to.be.a('boolean', \"isVegetarian field should be a boolean value\");",
							"    });",
							"  });",
							"",
							"",
							"pm.test(\"Number of servings is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(recipe) {",
							"        pm.expect(recipe.numberOfServings).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"isVegetarian\": true\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/recipes/filter",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"recipes",
						"filter"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:8080/filter(by not isVegetarian)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function (recipe) {",
							"        pm.expect(recipe.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Number of servings is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('array');",
							"",
							"  responseData.forEach(function(recipe) {",
							"    pm.expect(recipe.numberOfServings).to.be.a('number');",
							"    pm.expect(recipe.numberOfServings).to.be.at.least(0);",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Instructions is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    pm.expect(responseData).to.have.lengthOf.at.least(1, \"Array should not be empty\");",
							"    ",
							"    responseData.forEach(function(recipe) {",
							"        pm.expect(recipe.instructions).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Instructions should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"isVegetarian\": false\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/recipes/filter",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"recipes",
						"filter"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:8080/filter(by ingredientContain)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response is an array\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'id' field is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(recipe) {",
							"        pm.expect(recipe.id).to.be.a('number');",
							"        pm.expect(recipe.id).to.be.at.least(0);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate that the 'name' field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(recipe) {",
							"        pm.expect(recipe.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'isVegetarian' field is a boolean value\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  ",
							"  responseData.forEach(function(recipe) {",
							"    pm.expect(recipe.isVegetarian).to.be.a('boolean');",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"ingredientsContain\": [\"pasta\"]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/recipes/filter",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"recipes",
						"filter"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:8080/filter(by ingredientNotContain)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'instructions' is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(recipe) {",
							"        pm.expect(recipe.instructions).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"The 'ingredients' array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    pm.expect(responseData).to.have.lengthOf.at.least(1);",
							"    ",
							"    responseData.forEach(function(recipe) {",
							"        pm.expect(recipe.ingredients).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"ingredientsNotContain\": [\"olive oil\"]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/recipes/filter",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"recipes",
						"filter"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:8080/filter(by multiple ingredientContain)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response is an array with at least one element\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Each recipe has a non-empty name\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"",
							"    responseData.forEach(function(recipe) {",
							"        pm.expect(recipe).to.have.property('name').that.is.not.empty;",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Each recipe is marked as vegetarian\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  ",
							"  responseData.forEach(function(recipe) {",
							"    pm.expect(recipe.isVegetarian).to.be.true;",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Each recipe has a positive number of servings\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"  ",
							"  responseData.forEach(function(recipe) {",
							"    pm.expect(recipe.numberOfServings).to.be.a('number').that.is.above(0);",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"ingredientsContain\": [\"pasta\", \"olive oil\"]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/recipes/filter",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"recipes",
						"filter"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:8080/filter(by multiple ingredientNotContain)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate that the response is an array\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"ingredientsNotContain\": [\"pasta\", \"olive oil\"]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/recipes/filter",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"recipes",
						"filter"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:8080/filter(by instructionsContaining, numberOfServings)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(recipe){",
							"    pm.expect(recipe.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Number of servings is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(recipe) {",
							"    pm.expect(recipe.numberOfServings).to.be.a('number');",
							"    pm.expect(recipe.numberOfServings).to.be.at.least(0);",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Instructions is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(recipe) {",
							"        pm.expect(recipe.instructions).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Instructions should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"instructionsContaining\": \"cook\",\n    \"numberOfServings\": 4\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/recipes/filter",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"recipes",
						"filter"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:8080/filter(by instructionsContaining, numberOfServings)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function (recipe) {",
							"    pm.expect(recipe.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Number of servings is a positive integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"  ",
							"  responseData.forEach(function(recipe) {",
							"    pm.expect(recipe.numberOfServings).to.be.a('number').greaterThan(0);",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Instructions is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    responseData.forEach(function(recipe) {",
							"        pm.expect(recipe.instructions).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Instructions should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"instructionsContaining\": \"cook\",\n    \"isVegetarian\": true,\n    \"numberOfServings\": 4\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/recipes/filter",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"recipes",
						"filter"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:8080/filter(by instructionsContaining, numberOfServings, ingredientsContain)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(recipe) {",
							"        pm.expect(recipe.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Each ingredient has a non-empty name\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(recipe) {",
							"        pm.expect(recipe.ingredients).to.exist;",
							"        ",
							"        recipe.ingredients.forEach(function(ingredient) {",
							"            pm.expect(ingredient.name).to.exist.and.to.have.lengthOf.at.least(1, \"Ingredient name should not be empty\");",
							"        });",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"instructionsContaining\": \"cook\",\n    \"numberOfServings\": 4,\n    \"ingredientsContain\": [\"pasta\", \"olive oil\"]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/recipes/filter",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"recipes",
						"filter"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:8080/filter(by instructionsContaining, numberOfServings, ingredientsContain)2",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"instructionsContaining\": \"cook\",\n    \"numberOfServings\": 3,\n    \"ingredientsContain\": [\"olive oil\"]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/recipes/filter",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"recipes",
						"filter"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:8080/filter(by instructionsContaining, numberOfServings, ingredientsContain, isVegetarian)",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"instructionsContaining\": \"cook\",\n    \"numberOfServings\": 4,\n    \"isVegetarian\": false,\n    \"ingredientsContain\": [\"olive oil\"]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/recipes/filter",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"recipes",
						"filter"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:8080/filter(by instructionsContaining, numberOfServings, ingredientsContain, isVegetarian)2",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"instructionsContaining\": \"cook\",\n    \"numberOfServings\": 4,\n    \"isVegetarian\": true,\n    \"ingredientsContain\": [\"olive oil\"]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/recipes/filter",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"recipes",
						"filter"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:8080/filter(by instructionsContaining, numberOfServings, ingredientsNotContain, isVegetarian)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  ",
							"  responseData.forEach(function(recipe){",
							"    pm.expect(recipe.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Number of servings is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(recipe) {",
							"        pm.expect(recipe.numberOfServings).to.be.a('number');",
							"        pm.expect(recipe.numberOfServings).to.be.at.least(0);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Instructions is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(recipe) {",
							"        pm.expect(recipe.instructions).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Instructions should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"instructionsContaining\": \"cook\",\n    \"numberOfServings\": 4,\n    \"isVegetarian\": true,\n    \"ingredientsNotContain\": [\"olive oil\"]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/recipes/filter",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"recipes",
						"filter"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:8080/filter(by instructionsContaining, numberOfServings, ingredientsNotContain, isVegetarian) Copy",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"instructionsContaining\": \"cook\",\n    \"numberOfServings\": 4,\n    \"isVegetarian\": false,\n    \"ingredientsContain\": [\"olive oil\"]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/recipes/filter",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"recipes",
						"filter"
					]
				}
			},
			"response": []
		}
	]
}